/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type PublicDropStruct = {
  mintPrice: BigNumberish;
  startTime: BigNumberish;
  endTime: BigNumberish;
  maxTotalMintableByWallet: BigNumberish;
  feeBps: BigNumberish;
  restrictFeeRecipients: boolean;
};

export type PublicDropStructOutput = [
  BigNumber,
  number,
  number,
  number,
  number,
  boolean
] & {
  mintPrice: BigNumber;
  startTime: number;
  endTime: number;
  maxTotalMintableByWallet: number;
  feeBps: number;
  restrictFeeRecipients: boolean;
};

export type AllowListDataStruct = {
  merkleRoot: BytesLike;
  publicKeyURIs: string[];
  allowListURI: string;
};

export type AllowListDataStructOutput = [string, string[], string] & {
  merkleRoot: string;
  publicKeyURIs: string[];
  allowListURI: string;
};

export type TokenGatedDropStageStruct = {
  mintPrice: BigNumberish;
  maxTotalMintableByWallet: BigNumberish;
  startTime: BigNumberish;
  endTime: BigNumberish;
  dropStageIndex: BigNumberish;
  maxTokenSupplyForStage: BigNumberish;
  feeBps: BigNumberish;
  restrictFeeRecipients: boolean;
};

export type TokenGatedDropStageStructOutput = [
  BigNumber,
  number,
  number,
  number,
  number,
  number,
  number,
  boolean
] & {
  mintPrice: BigNumber;
  maxTotalMintableByWallet: number;
  startTime: number;
  endTime: number;
  dropStageIndex: number;
  maxTokenSupplyForStage: number;
  feeBps: number;
  restrictFeeRecipients: boolean;
};

export type SignedMintValidationParamsStruct = {
  minMintPrice: BigNumberish;
  maxMaxTotalMintableByWallet: BigNumberish;
  minStartTime: BigNumberish;
  maxEndTime: BigNumberish;
  maxMaxTokenSupplyForStage: BigNumberish;
  minFeeBps: BigNumberish;
  maxFeeBps: BigNumberish;
};

export type SignedMintValidationParamsStructOutput = [
  BigNumber,
  number,
  number,
  number,
  number,
  number,
  number
] & {
  minMintPrice: BigNumber;
  maxMaxTotalMintableByWallet: number;
  minStartTime: number;
  maxEndTime: number;
  maxMaxTokenSupplyForStage: number;
  minFeeBps: number;
  maxFeeBps: number;
};

export declare namespace ERC721SeaDropStructsErrorsAndEvents {
  export type MultiConfigureStructStruct = {
    maxSupply: BigNumberish;
    baseURI: string;
    contractURI: string;
    seaDropImpl: string;
    publicDrop: PublicDropStruct;
    dropURI: string;
    allowListData: AllowListDataStruct;
    creatorPayoutAddress: string;
    provenanceHash: BytesLike;
    allowedFeeRecipients: string[];
    disallowedFeeRecipients: string[];
    allowedPayers: string[];
    disallowedPayers: string[];
    tokenGatedAllowedNftTokens: string[];
    tokenGatedDropStages: TokenGatedDropStageStruct[];
    disallowedTokenGatedAllowedNftTokens: string[];
    signers: string[];
    signedMintValidationParams: SignedMintValidationParamsStruct[];
    disallowedSigners: string[];
  };

  export type MultiConfigureStructStructOutput = [
    BigNumber,
    string,
    string,
    string,
    PublicDropStructOutput,
    string,
    AllowListDataStructOutput,
    string,
    string,
    string[],
    string[],
    string[],
    string[],
    string[],
    TokenGatedDropStageStructOutput[],
    string[],
    string[],
    SignedMintValidationParamsStructOutput[],
    string[]
  ] & {
    maxSupply: BigNumber;
    baseURI: string;
    contractURI: string;
    seaDropImpl: string;
    publicDrop: PublicDropStructOutput;
    dropURI: string;
    allowListData: AllowListDataStructOutput;
    creatorPayoutAddress: string;
    provenanceHash: string;
    allowedFeeRecipients: string[];
    disallowedFeeRecipients: string[];
    allowedPayers: string[];
    disallowedPayers: string[];
    tokenGatedAllowedNftTokens: string[];
    tokenGatedDropStages: TokenGatedDropStageStructOutput[];
    disallowedTokenGatedAllowedNftTokens: string[];
    signers: string[];
    signedMintValidationParams: SignedMintValidationParamsStructOutput[];
    disallowedSigners: string[];
  };
}

export declare namespace ISeaDropTokenContractMetadata {
  export type RoyaltyInfoStruct = {
    royaltyAddress: string;
    royaltyBps: BigNumberish;
  };

  export type RoyaltyInfoStructOutput = [string, BigNumber] & {
    royaltyAddress: string;
    royaltyBps: BigNumber;
  };
}

export interface ERC721SeaDropInterface extends utils.Interface {
  functions: {
    "OPERATOR_FILTER_REGISTRY()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseURI()": FunctionFragment;
    "cancelOwnershipTransfer()": FunctionFragment;
    "contractURI()": FunctionFragment;
    "emitBatchMetadataUpdate(uint256,uint256)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getMintStats(address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "maxSupply()": FunctionFragment;
    "mintSeaDrop(address,uint256)": FunctionFragment;
    "multiConfigure((uint256,string,string,address,(uint80,uint48,uint48,uint16,uint16,bool),string,(bytes32,string[],string),address,bytes32,address[],address[],address[],address[],address[],(uint80,uint16,uint48,uint48,uint8,uint32,uint16,bool)[],address[],address[],(uint80,uint24,uint40,uint40,uint40,uint16,uint16)[],address[]))": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "provenanceHash()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "royaltyAddress()": FunctionFragment;
    "royaltyBasisPoints()": FunctionFragment;
    "royaltyInfo(uint256,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setContractURI(string)": FunctionFragment;
    "setMaxSupply(uint256)": FunctionFragment;
    "setProvenanceHash(bytes32)": FunctionFragment;
    "setRoyaltyInfo((address,uint96))": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateAllowList(address,(bytes32,string[],string))": FunctionFragment;
    "updateAllowedFeeRecipient(address,address,bool)": FunctionFragment;
    "updateAllowedSeaDrop(address[])": FunctionFragment;
    "updateCreatorPayoutAddress(address,address)": FunctionFragment;
    "updateDropURI(address,string)": FunctionFragment;
    "updatePayer(address,address,bool)": FunctionFragment;
    "updatePublicDrop(address,(uint80,uint48,uint48,uint16,uint16,bool))": FunctionFragment;
    "updateSignedMintValidationParams(address,address,(uint80,uint24,uint40,uint40,uint40,uint16,uint16))": FunctionFragment;
    "updateTokenGatedDrop(address,address,(uint80,uint16,uint48,uint48,uint8,uint32,uint16,bool))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "OPERATOR_FILTER_REGISTRY"
      | "acceptOwnership"
      | "approve"
      | "balanceOf"
      | "baseURI"
      | "cancelOwnershipTransfer"
      | "contractURI"
      | "emitBatchMetadataUpdate"
      | "getApproved"
      | "getMintStats"
      | "isApprovedForAll"
      | "maxSupply"
      | "mintSeaDrop"
      | "multiConfigure"
      | "name"
      | "owner"
      | "ownerOf"
      | "provenanceHash"
      | "renounceOwnership"
      | "royaltyAddress"
      | "royaltyBasisPoints"
      | "royaltyInfo"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setBaseURI"
      | "setContractURI"
      | "setMaxSupply"
      | "setProvenanceHash"
      | "setRoyaltyInfo"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "transferOwnership"
      | "updateAllowList"
      | "updateAllowedFeeRecipient"
      | "updateAllowedSeaDrop"
      | "updateCreatorPayoutAddress"
      | "updateDropURI"
      | "updatePayer"
      | "updatePublicDrop"
      | "updateSignedMintValidationParams"
      | "updateTokenGatedDrop"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "OPERATOR_FILTER_REGISTRY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelOwnershipTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emitBatchMetadataUpdate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMintStats",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "maxSupply", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintSeaDrop",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multiConfigure",
    values: [ERC721SeaDropStructsErrorsAndEvents.MultiConfigureStructStruct]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "provenanceHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setContractURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProvenanceHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltyInfo",
    values: [ISeaDropTokenContractMetadata.RoyaltyInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAllowList",
    values: [string, AllowListDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAllowedFeeRecipient",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAllowedSeaDrop",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCreatorPayoutAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDropURI",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePayer",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePublicDrop",
    values: [string, PublicDropStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSignedMintValidationParams",
    values: [string, string, SignedMintValidationParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenGatedDrop",
    values: [string, string, TokenGatedDropStageStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "OPERATOR_FILTER_REGISTRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOwnershipTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitBatchMetadataUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxSupply", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintSeaDrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiConfigure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "provenanceHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProvenanceHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAllowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAllowedFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAllowedSeaDrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCreatorPayoutAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDropURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePublicDrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSignedMintValidationParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenGatedDrop",
    data: BytesLike
  ): Result;

  events: {
    "AllowedSeaDropUpdated(address[])": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "BatchMetadataUpdate(uint256,uint256)": EventFragment;
    "ConsecutiveTransfer(uint256,uint256,address,address)": EventFragment;
    "ContractURIUpdated(string)": EventFragment;
    "MaxSupplyUpdated(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PotentialOwnerUpdated(address)": EventFragment;
    "ProvenanceHashUpdated(bytes32,bytes32)": EventFragment;
    "RoyaltyInfoUpdated(address,uint256)": EventFragment;
    "SeaDropTokenDeployed()": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllowedSeaDropUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BatchMetadataUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConsecutiveTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractURIUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxSupplyUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PotentialOwnerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProvenanceHashUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltyInfoUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SeaDropTokenDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface AllowedSeaDropUpdatedEventObject {
  allowedSeaDrop: string[];
}
export type AllowedSeaDropUpdatedEvent = TypedEvent<
  [string[]],
  AllowedSeaDropUpdatedEventObject
>;

export type AllowedSeaDropUpdatedEventFilter =
  TypedEventFilter<AllowedSeaDropUpdatedEvent>;

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface BatchMetadataUpdateEventObject {
  _fromTokenId: BigNumber;
  _toTokenId: BigNumber;
}
export type BatchMetadataUpdateEvent = TypedEvent<
  [BigNumber, BigNumber],
  BatchMetadataUpdateEventObject
>;

export type BatchMetadataUpdateEventFilter =
  TypedEventFilter<BatchMetadataUpdateEvent>;

export interface ConsecutiveTransferEventObject {
  fromTokenId: BigNumber;
  toTokenId: BigNumber;
  from: string;
  to: string;
}
export type ConsecutiveTransferEvent = TypedEvent<
  [BigNumber, BigNumber, string, string],
  ConsecutiveTransferEventObject
>;

export type ConsecutiveTransferEventFilter =
  TypedEventFilter<ConsecutiveTransferEvent>;

export interface ContractURIUpdatedEventObject {
  newContractURI: string;
}
export type ContractURIUpdatedEvent = TypedEvent<
  [string],
  ContractURIUpdatedEventObject
>;

export type ContractURIUpdatedEventFilter =
  TypedEventFilter<ContractURIUpdatedEvent>;

export interface MaxSupplyUpdatedEventObject {
  newMaxSupply: BigNumber;
}
export type MaxSupplyUpdatedEvent = TypedEvent<
  [BigNumber],
  MaxSupplyUpdatedEventObject
>;

export type MaxSupplyUpdatedEventFilter =
  TypedEventFilter<MaxSupplyUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PotentialOwnerUpdatedEventObject {
  newPotentialAdministrator: string;
}
export type PotentialOwnerUpdatedEvent = TypedEvent<
  [string],
  PotentialOwnerUpdatedEventObject
>;

export type PotentialOwnerUpdatedEventFilter =
  TypedEventFilter<PotentialOwnerUpdatedEvent>;

export interface ProvenanceHashUpdatedEventObject {
  previousHash: string;
  newHash: string;
}
export type ProvenanceHashUpdatedEvent = TypedEvent<
  [string, string],
  ProvenanceHashUpdatedEventObject
>;

export type ProvenanceHashUpdatedEventFilter =
  TypedEventFilter<ProvenanceHashUpdatedEvent>;

export interface RoyaltyInfoUpdatedEventObject {
  receiver: string;
  bps: BigNumber;
}
export type RoyaltyInfoUpdatedEvent = TypedEvent<
  [string, BigNumber],
  RoyaltyInfoUpdatedEventObject
>;

export type RoyaltyInfoUpdatedEventFilter =
  TypedEventFilter<RoyaltyInfoUpdatedEvent>;

export interface SeaDropTokenDeployedEventObject {}
export type SeaDropTokenDeployedEvent = TypedEvent<
  [],
  SeaDropTokenDeployedEventObject
>;

export type SeaDropTokenDeployedEventFilter =
  TypedEventFilter<SeaDropTokenDeployedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface ERC721SeaDrop extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC721SeaDropInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    OPERATOR_FILTER_REGISTRY(overrides?: CallOverrides): Promise<[string]>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    baseURI(overrides?: CallOverrides): Promise<[string]>;

    cancelOwnershipTransfer(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    emitBatchMetadataUpdate(
      fromTokenId: BigNumberish,
      toTokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMintStats(
      minter: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        minterNumMinted: BigNumber;
        currentTotalSupply: BigNumber;
        maxSupply: BigNumber;
      }
    >;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintSeaDrop(
      minter: string,
      quantity: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    multiConfigure(
      config: ERC721SeaDropStructsErrorsAndEvents.MultiConfigureStructStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    provenanceHash(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    royaltyAddress(overrides?: CallOverrides): Promise<[string]>;

    royaltyBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    royaltyInfo(
      arg0: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { receiver: string; royaltyAmount: BigNumber }
    >;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setBaseURI(
      newBaseURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMaxSupply(
      newMaxSupply: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setProvenanceHash(
      newProvenanceHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRoyaltyInfo(
      newInfo: ISeaDropTokenContractMetadata.RoyaltyInfoStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newPotentialOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateAllowList(
      seaDropImpl: string,
      allowListData: AllowListDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateAllowedFeeRecipient(
      seaDropImpl: string,
      feeRecipient: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateAllowedSeaDrop(
      allowedSeaDrop: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateCreatorPayoutAddress(
      seaDropImpl: string,
      payoutAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateDropURI(
      seaDropImpl: string,
      dropURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updatePayer(
      seaDropImpl: string,
      payer: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updatePublicDrop(
      seaDropImpl: string,
      publicDrop: PublicDropStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateSignedMintValidationParams(
      seaDropImpl: string,
      signer: string,
      signedMintValidationParams: SignedMintValidationParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateTokenGatedDrop(
      seaDropImpl: string,
      allowedNftToken: string,
      dropStage: TokenGatedDropStageStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  OPERATOR_FILTER_REGISTRY(overrides?: CallOverrides): Promise<string>;

  acceptOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  approve(
    operator: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  baseURI(overrides?: CallOverrides): Promise<string>;

  cancelOwnershipTransfer(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  contractURI(overrides?: CallOverrides): Promise<string>;

  emitBatchMetadataUpdate(
    fromTokenId: BigNumberish,
    toTokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getMintStats(
    minter: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      minterNumMinted: BigNumber;
      currentTotalSupply: BigNumber;
      maxSupply: BigNumber;
    }
  >;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

  mintSeaDrop(
    minter: string,
    quantity: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  multiConfigure(
    config: ERC721SeaDropStructsErrorsAndEvents.MultiConfigureStructStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  provenanceHash(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  royaltyAddress(overrides?: CallOverrides): Promise<string>;

  royaltyBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  royaltyInfo(
    arg0: BigNumberish,
    _salePrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { receiver: string; royaltyAmount: BigNumber }
  >;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setBaseURI(
    newBaseURI: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setContractURI(
    newContractURI: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMaxSupply(
    newMaxSupply: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setProvenanceHash(
    newProvenanceHash: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRoyaltyInfo(
    newInfo: ISeaDropTokenContractMetadata.RoyaltyInfoStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newPotentialOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateAllowList(
    seaDropImpl: string,
    allowListData: AllowListDataStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateAllowedFeeRecipient(
    seaDropImpl: string,
    feeRecipient: string,
    allowed: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateAllowedSeaDrop(
    allowedSeaDrop: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateCreatorPayoutAddress(
    seaDropImpl: string,
    payoutAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateDropURI(
    seaDropImpl: string,
    dropURI: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updatePayer(
    seaDropImpl: string,
    payer: string,
    allowed: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updatePublicDrop(
    seaDropImpl: string,
    publicDrop: PublicDropStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateSignedMintValidationParams(
    seaDropImpl: string,
    signer: string,
    signedMintValidationParams: SignedMintValidationParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateTokenGatedDrop(
    seaDropImpl: string,
    allowedNftToken: string,
    dropStage: TokenGatedDropStageStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    OPERATOR_FILTER_REGISTRY(overrides?: CallOverrides): Promise<string>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<string>;

    cancelOwnershipTransfer(overrides?: CallOverrides): Promise<void>;

    contractURI(overrides?: CallOverrides): Promise<string>;

    emitBatchMetadataUpdate(
      fromTokenId: BigNumberish,
      toTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getMintStats(
      minter: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        minterNumMinted: BigNumber;
        currentTotalSupply: BigNumber;
        maxSupply: BigNumber;
      }
    >;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    mintSeaDrop(
      minter: string,
      quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    multiConfigure(
      config: ERC721SeaDropStructsErrorsAndEvents.MultiConfigureStructStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    provenanceHash(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    royaltyAddress(overrides?: CallOverrides): Promise<string>;

    royaltyBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    royaltyInfo(
      arg0: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { receiver: string; royaltyAmount: BigNumber }
    >;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(newBaseURI: string, overrides?: CallOverrides): Promise<void>;

    setContractURI(
      newContractURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxSupply(
      newMaxSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProvenanceHash(
      newProvenanceHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoyaltyInfo(
      newInfo: ISeaDropTokenContractMetadata.RoyaltyInfoStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newPotentialOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAllowList(
      seaDropImpl: string,
      allowListData: AllowListDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAllowedFeeRecipient(
      seaDropImpl: string,
      feeRecipient: string,
      allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAllowedSeaDrop(
      allowedSeaDrop: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateCreatorPayoutAddress(
      seaDropImpl: string,
      payoutAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDropURI(
      seaDropImpl: string,
      dropURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePayer(
      seaDropImpl: string,
      payer: string,
      allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePublicDrop(
      seaDropImpl: string,
      publicDrop: PublicDropStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSignedMintValidationParams(
      seaDropImpl: string,
      signer: string,
      signedMintValidationParams: SignedMintValidationParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTokenGatedDrop(
      seaDropImpl: string,
      allowedNftToken: string,
      dropStage: TokenGatedDropStageStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AllowedSeaDropUpdated(address[])"(
      allowedSeaDrop?: null
    ): AllowedSeaDropUpdatedEventFilter;
    AllowedSeaDropUpdated(
      allowedSeaDrop?: null
    ): AllowedSeaDropUpdatedEventFilter;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "BatchMetadataUpdate(uint256,uint256)"(
      _fromTokenId?: null,
      _toTokenId?: null
    ): BatchMetadataUpdateEventFilter;
    BatchMetadataUpdate(
      _fromTokenId?: null,
      _toTokenId?: null
    ): BatchMetadataUpdateEventFilter;

    "ConsecutiveTransfer(uint256,uint256,address,address)"(
      fromTokenId?: BigNumberish | null,
      toTokenId?: null,
      from?: string | null,
      to?: string | null
    ): ConsecutiveTransferEventFilter;
    ConsecutiveTransfer(
      fromTokenId?: BigNumberish | null,
      toTokenId?: null,
      from?: string | null,
      to?: string | null
    ): ConsecutiveTransferEventFilter;

    "ContractURIUpdated(string)"(
      newContractURI?: null
    ): ContractURIUpdatedEventFilter;
    ContractURIUpdated(newContractURI?: null): ContractURIUpdatedEventFilter;

    "MaxSupplyUpdated(uint256)"(
      newMaxSupply?: null
    ): MaxSupplyUpdatedEventFilter;
    MaxSupplyUpdated(newMaxSupply?: null): MaxSupplyUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PotentialOwnerUpdated(address)"(
      newPotentialAdministrator?: null
    ): PotentialOwnerUpdatedEventFilter;
    PotentialOwnerUpdated(
      newPotentialAdministrator?: null
    ): PotentialOwnerUpdatedEventFilter;

    "ProvenanceHashUpdated(bytes32,bytes32)"(
      previousHash?: null,
      newHash?: null
    ): ProvenanceHashUpdatedEventFilter;
    ProvenanceHashUpdated(
      previousHash?: null,
      newHash?: null
    ): ProvenanceHashUpdatedEventFilter;

    "RoyaltyInfoUpdated(address,uint256)"(
      receiver?: null,
      bps?: null
    ): RoyaltyInfoUpdatedEventFilter;
    RoyaltyInfoUpdated(
      receiver?: null,
      bps?: null
    ): RoyaltyInfoUpdatedEventFilter;

    "SeaDropTokenDeployed()"(): SeaDropTokenDeployedEventFilter;
    SeaDropTokenDeployed(): SeaDropTokenDeployedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
  };

  estimateGas: {
    OPERATOR_FILTER_REGISTRY(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    cancelOwnershipTransfer(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    emitBatchMetadataUpdate(
      fromTokenId: BigNumberish,
      toTokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMintStats(minter: string, overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    mintSeaDrop(
      minter: string,
      quantity: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    multiConfigure(
      config: ERC721SeaDropStructsErrorsAndEvents.MultiConfigureStructStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    provenanceHash(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    royaltyAddress(overrides?: CallOverrides): Promise<BigNumber>;

    royaltyBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    royaltyInfo(
      arg0: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setBaseURI(
      newBaseURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMaxSupply(
      newMaxSupply: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setProvenanceHash(
      newProvenanceHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRoyaltyInfo(
      newInfo: ISeaDropTokenContractMetadata.RoyaltyInfoStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newPotentialOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateAllowList(
      seaDropImpl: string,
      allowListData: AllowListDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateAllowedFeeRecipient(
      seaDropImpl: string,
      feeRecipient: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateAllowedSeaDrop(
      allowedSeaDrop: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateCreatorPayoutAddress(
      seaDropImpl: string,
      payoutAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateDropURI(
      seaDropImpl: string,
      dropURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updatePayer(
      seaDropImpl: string,
      payer: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updatePublicDrop(
      seaDropImpl: string,
      publicDrop: PublicDropStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateSignedMintValidationParams(
      seaDropImpl: string,
      signer: string,
      signedMintValidationParams: SignedMintValidationParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateTokenGatedDrop(
      seaDropImpl: string,
      allowedNftToken: string,
      dropStage: TokenGatedDropStageStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    OPERATOR_FILTER_REGISTRY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelOwnershipTransfer(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emitBatchMetadataUpdate(
      fromTokenId: BigNumberish,
      toTokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMintStats(
      minter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintSeaDrop(
      minter: string,
      quantity: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    multiConfigure(
      config: ERC721SeaDropStructsErrorsAndEvents.MultiConfigureStructStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    provenanceHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    royaltyAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    royaltyBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    royaltyInfo(
      arg0: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      newBaseURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMaxSupply(
      newMaxSupply: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setProvenanceHash(
      newProvenanceHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRoyaltyInfo(
      newInfo: ISeaDropTokenContractMetadata.RoyaltyInfoStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newPotentialOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateAllowList(
      seaDropImpl: string,
      allowListData: AllowListDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateAllowedFeeRecipient(
      seaDropImpl: string,
      feeRecipient: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateAllowedSeaDrop(
      allowedSeaDrop: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateCreatorPayoutAddress(
      seaDropImpl: string,
      payoutAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateDropURI(
      seaDropImpl: string,
      dropURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updatePayer(
      seaDropImpl: string,
      payer: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updatePublicDrop(
      seaDropImpl: string,
      publicDrop: PublicDropStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateSignedMintValidationParams(
      seaDropImpl: string,
      signer: string,
      signedMintValidationParams: SignedMintValidationParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateTokenGatedDrop(
      seaDropImpl: string,
      allowedNftToken: string,
      dropStage: TokenGatedDropStageStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
